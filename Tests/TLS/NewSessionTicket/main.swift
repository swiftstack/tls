import Test
@testable import TLS

let bytes: [UInt8] = [
    // header
    0x04, 0x00, 0x00, 0xb2,
    // lifetime
    0x00, 0x02, 0xa3, 0x00,
    // age add
    0x04, 0x03, 0x02, 0x01,
    // nonce
    0x01, 0x00,
    // session ticket
    0x00, 0xa0, 0x01, 0x06, 0x09, 0x11, 0x16, 0x19,
    0x21, 0x26, 0x29, 0x31, 0x36, 0x39, 0x41, 0x46,
    0x49, 0x51, 0x03, 0x06, 0x09, 0x13, 0x16, 0x19,
    0x23, 0x26, 0x29, 0x33, 0x36, 0x39, 0x43, 0x46,
    0x49, 0x53, 0xf7, 0x00, 0x29, 0xec, 0xf2, 0xc4,
    0xa4, 0x41, 0xfc, 0x30, 0x17, 0x2e, 0x9f, 0x7c,
    0xa8, 0xaf, 0x75, 0x70, 0xf0, 0x1f, 0xc7, 0x98,
    0xf7, 0xcf, 0x5a, 0x5a, 0x6b, 0x5b, 0xfe, 0xf1,
    0xe7, 0x3a, 0xe8, 0xf7, 0x6c, 0xd2, 0xa8, 0xa6,
    0x92, 0x5b, 0x96, 0x8d, 0xde, 0xdb, 0xd3, 0x20,
    0x6a, 0xcb, 0x69, 0x06, 0xf4, 0x91, 0x85, 0x2e,
    0xe6, 0x5e, 0x0c, 0x59, 0xf2, 0x9e, 0x9b, 0x79,
    0x91, 0x24, 0x7e, 0x4a, 0x32, 0x3d, 0xbe, 0x4b,
    0x80, 0x70, 0xaf, 0xd0, 0x1d, 0xe2, 0xca, 0x05,
    0x35, 0x09, 0x09, 0x05, 0x0f, 0xbb, 0xc4, 0xae,
    0xd7, 0xc4, 0xed, 0xd7, 0xae, 0x35, 0xc8, 0x73,
    0x63, 0x78, 0x64, 0xc9, 0x7a, 0x1f, 0xed, 0x7a,
    0x9a, 0x47, 0x44, 0xfd, 0x50, 0xf7, 0xb7, 0xe0,
    0x64, 0xa9, 0x02, 0xc1, 0x5c, 0x23, 0x18, 0x3f,
    0xc4, 0xcf, 0x72, 0x02, 0x59, 0x2d, 0xe1, 0xaa,
    0x61, 0x72,
    // extensions
    0x00, 0x04, 0x5a, 0x5a, 0x00, 0x00
]

let newSessionTicket: NewSessionTicket = .init(
    lifetime: 172800,
    ageAdd: 67305985,
    nonce: [0],
    ticket: [
        0x01, 0x06, 0x09, 0x11, 0x16, 0x19, 0x21, 0x26,
        0x29, 0x31, 0x36, 0x39, 0x41, 0x46, 0x49, 0x51,
        0x03, 0x06, 0x09, 0x13, 0x16, 0x19, 0x23, 0x26,
        0x29, 0x33, 0x36, 0x39, 0x43, 0x46, 0x49, 0x53,
        0xf7, 0x00, 0x29, 0xec, 0xf2, 0xc4, 0xa4, 0x41,
        0xfc, 0x30, 0x17, 0x2e, 0x9f, 0x7c, 0xa8, 0xaf,
        0x75, 0x70, 0xf0, 0x1f, 0xc7, 0x98, 0xf7, 0xcf,
        0x5a, 0x5a, 0x6b, 0x5b, 0xfe, 0xf1, 0xe7, 0x3a,
        0xe8, 0xf7, 0x6c, 0xd2, 0xa8, 0xa6, 0x92, 0x5b,
        0x96, 0x8d, 0xde, 0xdb, 0xd3, 0x20, 0x6a, 0xcb,
        0x69, 0x06, 0xf4, 0x91, 0x85, 0x2e, 0xe6, 0x5e,
        0x0c, 0x59, 0xf2, 0x9e, 0x9b, 0x79, 0x91, 0x24,
        0x7e, 0x4a, 0x32, 0x3d, 0xbe, 0x4b, 0x80, 0x70,
        0xaf, 0xd0, 0x1d, 0xe2, 0xca, 0x05, 0x35, 0x09,
        0x09, 0x05, 0x0f, 0xbb, 0xc4, 0xae, 0xd7, 0xc4,
        0xed, 0xd7, 0xae, 0x35, 0xc8, 0x73, 0x63, 0x78,
        0x64, 0xc9, 0x7a, 0x1f, 0xed, 0x7a, 0x9a, 0x47,
        0x44, 0xfd, 0x50, 0xf7, 0xb7, 0xe0, 0x64, 0xa9,
        0x02, 0xc1, 0x5c, 0x23, 0x18, 0x3f, 0xc4, 0xcf,
        0x72, 0x02, 0x59, 0x2d, 0xe1, 0xaa, 0x61, 0x72],
    earlyDataIndication: .init(maxSize: 1515847680))

let handshake = Handshake.newSessionTicket(
    newSessionTicket)

test("decode new session ticket") {
    let result = try await Handshake.decode(from: bytes)
    expect(result == handshake)
}

test("encode new session ticket") {
    let result = try await handshake.encode()
    expect(result == bytes)
}

await run()
