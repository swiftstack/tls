import Test
@testable import TLS

let bytes: [UInt8] = [
    // TLS 1.2
    0x03, 0x03,
    // time + random
    0xfe, 0xd9, 0xad, 0x34, 0xbc, 0x4e, 0x31, 0xaa,
    0x70, 0x82, 0x07, 0x5f, 0x72, 0x32, 0xaa, 0x33,
    0x37, 0xa8, 0x91, 0x07, 0xb8, 0xfe, 0xc5, 0x0e,
    0x6b, 0x68, 0x76, 0xa1, 0xfd, 0x31, 0x94, 0x75,
    // session id length
    0x20,
    //session id
    0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
    0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
    0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
    0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9,
    // ciper suites length
    0x00, 0x06,
    // ciper suites
    0x13, 0x02, 0x13, 0x03, 0x13, 0x01,
    // compression methods length
    0x01,
    // compression method: null
    0x00,
    // extensions length
    0x00, 0x69,
    // server name
    0x00, 0x00, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00,
    0x0d, 0x73, 0x77, 0x69, 0x66, 0x74, 0x73, 0x74,
    0x61, 0x63, 0x6b, 0x2e, 0x69, 0x6f,
    // supported groups
    0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d,
    0x00, 0x17, 0x00, 0x19, 0x00, 0x18,
    // signature algorithms
    0x00, 0x0d, 0x00, 0x0a, 0x00, 0x08, 0x04, 0x03,
    0x05, 0x03, 0x06, 0x03, 0x08, 0x07,
    // supported versions
    0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
    // psk key exchange modes
    0x00, 0x2d, 0x00, 0x02, 0x01, 0x01,
    // key share extension (kse)
    0x00, 0x33,
    // kse length
    0x00, 0x26,
    // kse client length
    0x00, 0x24,
    // kse group
    0x00, 0x1d,
    // kse key length
    0x00, 0x20,
    // kse key
    0xe1, 0xc7, 0x66, 0x42, 0xb6, 0x44, 0xd1, 0xf0,
    0x8b, 0x90, 0x35, 0xce, 0xf7, 0xe3, 0x8e, 0xbb,
    0x3b, 0x96, 0xfe, 0x7e, 0x4f, 0xd1, 0xc2, 0xbb,
    0x72, 0x91, 0x85, 0x89, 0x42, 0xd6, 0xb3, 0x49
]

test("decode client hello") {
    let hello = try await ClientHello.decode(from: bytes)

    expect(hello.random.time == 4275678516)

    expect(hello.random.bytes == [
        0xbc, 0x4e, 0x31, 0xaa,
        0x70, 0x82, 0x07, 0x5f, 0x72, 0x32, 0xaa, 0x33,
        0x37, 0xa8, 0x91, 0x07, 0xb8, 0xfe, 0xc5, 0x0e,
        0x6b, 0x68, 0x76, 0xa1, 0xfd, 0x31, 0x94, 0x75
    ])

    expect(hello.sessionId == .init(data: [
        0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
        0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
        0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
        0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9]))

    expect(hello.ciperSuites == [
        .tls_aes_256_gcm_sha384,
        .tls_chacha20_poly1305_sha256,
        .tls_aes_128_gcm_sha256])

    expect(hello.compressionMethods == [.none])

    expect(hello.extensions.items.count == 6)

    expect(
        hello.extensions[safe: 0]
        ==
        .serverName([.init(type: .hostName, value: "swiftstack.io")]))

    expect(
        hello.extensions[safe: 1]
        ==
        .supportedGroups([
            .x25519,
            .secp256r1,
            .secp521r1,
            .secp384r1]))

    expect(
        hello.extensions[safe: 2]
        ==
        .signatureAlgorithms([
            .ecdsa_secp256r1_sha256,
            .ecdsa_secp384r1_sha384,
            .ecdsa_secp521r1_sha512,
            .ed25519
        ]))

    expect(
        hello.extensions[safe: 3]
        ==
        .supportedVersions([.tls13]))

    expect(
        hello.extensions[safe: 4]
        ==
        .pskKeyExchangeModes([.psk_dhe_ke]))

    expect(
        hello.extensions[safe: 5]
        ==
        .keyShare([.init(
            group: .x25519,
            keyExchange: [
                0xe1, 0xc7, 0x66, 0x42, 0xb6, 0x44, 0xd1, 0xf0,
                0x8b, 0x90, 0x35, 0xce, 0xf7, 0xe3, 0x8e, 0xbb,
                0x3b, 0x96, 0xfe, 0x7e, 0x4f, 0xd1, 0xc2, 0xbb,
                0x72, 0x91, 0x85, 0x89, 0x42, 0xd6, 0xb3, 0x49])]))
}

test("encode client hello") {
    let hello = ClientHello(
        version: .tls12,
        random: .init(time: 4275678516, bytes: [
                                    0xbc, 0x4e, 0x31, 0xaa,
            0x70, 0x82, 0x07, 0x5f, 0x72, 0x32, 0xaa, 0x33,
            0x37, 0xa8, 0x91, 0x07, 0xb8, 0xfe, 0xc5, 0x0e,
            0x6b, 0x68, 0x76, 0xa1, 0xfd, 0x31, 0x94, 0x75
        ]),
        sessionId: .init(data: [
            0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
            0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
            0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
            0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9]),
        ciperSuites: [
            .tls_aes_256_gcm_sha384,
            .tls_chacha20_poly1305_sha256,
            .tls_aes_128_gcm_sha256,
            //.deprecated(.tls_empty_renegotiation_info_scsv)
        ],
        compressionMethods: [.none],
        extensions: [
            .serverName([
                .init(type: .hostName, value: "swiftstack.io")]),
            .supportedGroups([
                .x25519,
                .secp256r1,
                .secp521r1,
                .secp384r1]),
            .signatureAlgorithms([
                .ecdsa_secp256r1_sha256,
                .ecdsa_secp384r1_sha384,
                .ecdsa_secp521r1_sha512,
                .ed25519]),
            .supportedVersions([
                .tls13]),
            .pskKeyExchangeModes([.psk_dhe_ke]),
            .keyShare([.init(
                group: .x25519,
                keyExchange: [
                    0xe1, 0xc7, 0x66, 0x42, 0xb6, 0x44, 0xd1, 0xf0,
                    0x8b, 0x90, 0x35, 0xce, 0xf7, 0xe3, 0x8e, 0xbb,
                    0x3b, 0x96, 0xfe, 0x7e, 0x4f, 0xd1, 0xc2, 0xbb,
                    0x72, 0x91, 0x85, 0x89, 0x42, 0xd6, 0xb3, 0x49])])
        ])

    let result = try await hello.encode()
    expect(result == bytes)
}

await run()
