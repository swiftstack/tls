import Test
@testable import TLS

import Hex

let bytes: [UInt8] = [
    // TLS 1.2
    0x03, 0x03,
    // time + random
    0xd1, 0xe8, 0x97, 0x9c, 0x71, 0x3c, 0x8b, 0x1e,
    0xf3, 0x63, 0x8a, 0xa1, 0x92, 0xde, 0x9d, 0xcd,
    0x7b, 0x85, 0xb2, 0x0f, 0x9e, 0xc1, 0x85, 0x4c,
    0x20, 0xbb, 0xe9, 0x9e, 0x44, 0xad, 0xf6, 0x25,
    // session id length
    0x20,
    // session id
    0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
    0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
    0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
    0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9,
    // chiper suite
    0x13, 0x02,
    // compression method
    0x00,
    // extension length
    0x00, 0x2e,
    // supported versions - tls 1.3
    0x00, 0x2b, 0x00, 0x02, 0x03, 0x04,
    // key share extension + length
    0x00, 0x33, 0x00, 0x24,
    // key share group - x25519
    0x00, 0x1d,
    // key share length
    0x00, 0x20,
    // key
    0x84, 0xff, 0xfe, 0xb1, 0xc4, 0x71, 0x5a, 0x9b,
    0xfa, 0x0c, 0xd1, 0xb9, 0x44, 0x94, 0x0f, 0x9e,
    0x65, 0xea, 0x82, 0xe0, 0xdf, 0x43, 0x79, 0x91,
    0x2b, 0xc5, 0x33, 0x32, 0xd0, 0x73, 0xfa, 0x01]

test("decode server hello") {
    let hello = try await ServerHello.decode(from: bytes)

    expect(hello.version == .tls12)
    expect(hello.random.time == 3521681308)
    expect(hello.random.bytes == [
        0x71, 0x3c, 0x8b, 0x1e,
        0xf3, 0x63, 0x8a, 0xa1, 0x92, 0xde, 0x9d, 0xcd,
        0x7b, 0x85, 0xb2, 0x0f, 0x9e, 0xc1, 0x85, 0x4c,
        0x20, 0xbb, 0xe9, 0x9e, 0x44, 0xad, 0xf6, 0x25])
    expect(hello.sessionId == .init(data: [
        0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
        0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
        0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
        0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9]))
    expect(hello.ciperSuite == .tls_aes_256_gcm_sha384)
    expect(hello.compressionMethod == .none)

    expect(hello.extensions[safe: 0] == .supportedVersions(.tls13))

    expect(
        hello.extensions[safe: 1]
        ==
        .keyShare(
            .init(
                group: .x25519,
                keyExchange: [
                    0x84, 0xff, 0xfe, 0xb1, 0xc4, 0x71, 0x5a, 0x9b,
                    0xfa, 0x0c, 0xd1, 0xb9, 0x44, 0x94, 0x0f, 0x9e,
                    0x65, 0xea, 0x82, 0xe0, 0xdf, 0x43, 0x79, 0x91,
                    0x2b, 0xc5, 0x33, 0x32, 0xd0, 0x73, 0xfa, 0x01
                ])))
}

test("encode server hello") {
    let hello = ServerHello(
        version: .tls12,
        random: .init(time: 3521681308, bytes: [
            0x71, 0x3c, 0x8b, 0x1e,
            0xf3, 0x63, 0x8a, 0xa1, 0x92, 0xde, 0x9d, 0xcd,
            0x7b, 0x85, 0xb2, 0x0f, 0x9e, 0xc1, 0x85, 0x4c,
            0x20, 0xbb, 0xe9, 0x9e, 0x44, 0xad, 0xf6, 0x25]),
        sessionId: .init(data: [
            0xf5, 0x35, 0x67, 0x91, 0xe0, 0x9c, 0x62, 0x3d,
            0xe8, 0x7c, 0x77, 0x20, 0x2f, 0x3c, 0x22, 0xcc,
            0x71, 0x9d, 0x7e, 0xb5, 0xef, 0x23, 0x58, 0xfe,
            0x63, 0x65, 0xa4, 0x77, 0xfc, 0x7b, 0x38, 0xf9]),
        ciperSuite: .tls_aes_256_gcm_sha384,
        compressionMethod: .none,
        extensions: .init(
            supportedVersions: .tls13,
            keyShare: .init(
                group: .x25519,
                keyExchange: [
                    0x84, 0xff, 0xfe, 0xb1, 0xc4, 0x71, 0x5a, 0x9b,
                    0xfa, 0x0c, 0xd1, 0xb9, 0x44, 0x94, 0x0f, 0x9e,
                    0x65, 0xea, 0x82, 0xe0, 0xdf, 0x43, 0x79, 0x91,
                    0x2b, 0xc5, 0x33, 0x32, 0xd0, 0x73, 0xfa, 0x01
                ]))
    )

    let result = try await hello.encode()
    expect(result == bytes)
}

await run()
